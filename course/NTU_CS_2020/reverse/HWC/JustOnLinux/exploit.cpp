#include <iostream>
#include <cstring>
#include <vector>
using namespace std;

const string Base64Table = "vwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~o";

void write(int j, char *simbol)
{
    int k = 0;
    while (k < j + 1)
    {
        cout << simbol[k];
        k++;
    }
}

int getInt(const string &Base64Table, const string &inp, int i)
{
    int j;
    j = 0;
    while (Base64Table[j] != inp[i])
    {
        j++;
    }
    return j;
}

char *Decodding(const string &Base64Table, const string &inp)
{
    int longs;
    int i = 0, j = 0, bytes, ch = 1;
    char *simbol = new char[500];

    longs = inp.size();
    while ((longs / 4) > ch)
    {
        ch++;
        bytes = (getInt(Base64Table, inp, i) << 2) + ((getInt(Base64Table, inp, i + 1) >> 4));
        simbol[j] = char(bytes);
        j++;
        i++;

        bytes = ((getInt(Base64Table, inp, i) << 4)) + (getInt(Base64Table, inp, i + 1) >> 2);
        simbol[j] = char(bytes);
        i++;
        j++;

        bytes = ((getInt(Base64Table, inp, i) << 6)) + (getInt(Base64Table, inp, i + 1));
        simbol[j] = char(bytes);
        i = i + 2;
        j++;
    }

    bytes = (getInt(Base64Table, inp, i) << 2) + ((getInt(Base64Table, inp, i + 1) >> 4));
    simbol[j] = char(bytes);
    i++;
    if (inp[i + 1] != '=')
    {
        j++;
        bytes = ((getInt(Base64Table, inp, i) << 4)) + (getInt(Base64Table, inp, i + 1) >> 2);
        simbol[j] = char(bytes);
        i++;
        if (inp[i + 1] != '=')
        {
            j++;
            bytes = ((getInt(Base64Table, inp, i) << 6)) + (getInt(Base64Table, inp, i + 1));
            simbol[j] = char(bytes);
        }

        write(j, simbol);
    }
}

int main()
{
    string inp = "M&=wM].]VyA?GR&[GRA%I]Q#HOA_GRz/T%M?H?T@UR_%HBL?GRA.U?w>HSM*WS@ ";

    Decodding(Base64Table, inp);

    return 0;
}
