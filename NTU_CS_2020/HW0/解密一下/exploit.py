import random
import time

def toInt(data, size=4):
    return [int.from_bytes(data[i:i+size], 'big') for i in range(0, len(data), size)]

sec = int(time.time())
flag = ''
accumulate = [0] * 32
found = False
for i in range(0, 32):
    if i == 0:
        accumulate[i] = 0 + 0xFACEB00C & 0xffffffff
    accumulate[i] = accumulate[i - 1] + 0xFACEB00C & 0xffffffff
print('[*]decrypting...')
while 1:
    random.seed(sec)
    key = random.getrandbits(128).to_bytes(16, 'big')
    key = toInt(key)
    #密文 = 77f905c3 9e36b5eb 0deecbb4 eb08e8cb
    cipher = [int('77f905c3', 16), int('9e36b5eb', 16)]
    for i in range(32):
        cipher[1] = cipher[1] - ((cipher[0] << 4) + key[2] & 0xffffffff ^ (cipher[0] + accumulate[32-i-1]) & 0xffffffff ^ (cipher[0] >> 5) + key[3] & 0xffffffff) & 0xffffffff
        cipher[0] = cipher[0] - ((cipher[1] << 4) + key[0] & 0xffffffff ^ (cipher[1] + accumulate[32 - i - 1]) & 0xffffffff ^ (cipher[1] >> 5) + key[1] & 0xffffffff) & 0xffffffff
    try:
        if bytearray.fromhex(hex(cipher[0])[2:]).decode() == 'flag' or bytearray.fromhex(hex(cipher[0])[2:]).decode() == 'FLAG':
            found = True
            break
    except:
        pass
    sec -= 1
flag = bytearray.fromhex(hex(cipher[0])[2:]).decode() + bytearray.fromhex(hex(cipher[1])[2:]).decode()
cipher = [int('0deecbb4', 16), int('eb08e8cb', 16)]
for i in range(32):
    cipher[1] = cipher[1] - ((cipher[0] << 4) + key[2] & 0xffffffff ^ (cipher[0] + accumulate[32-i-1]) & 0xffffffff ^ (cipher[0] >> 5) + key[3] & 0xffffffff) & 0xffffffff
    cipher[0] = cipher[0] - ((cipher[1] << 4) + key[0] & 0xffffffff ^ (cipher[1] + accumulate[32 - i - 1]) & 0xffffffff ^ (cipher[1] >> 5) + key[1] & 0xffffffff) & 0xffffffff
flag += bytearray.fromhex(hex(cipher[0])[2:]).decode() + bytearray.fromhex(hex(cipher[1])[2:]).decode()
print(flag)
